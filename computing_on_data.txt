GNU Octave, version 7.1.0
Copyright (C) 1993-2022 The Octave Project Developers.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.

Octave was configured for "x86_64-w64-mingw32".

Additional information about Octave is available at https://www.octave.org.

Please contribute if you find this software useful.
For more information, visit https://www.octave.org/get-involved.html

Read https://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

octave:1> A = [1 2; 3 4; 5 6]
A =

   1   2
   3   4
   5   6

octave:2> B = [11 12; 13 14; 15 16]
B =

   11   12
   13   14
   15   16

octave:3> C = [1 1; 2 2]
C =

   1   1
   2   2

octave:4> A*C %matrix multiplication
ans =

    5    5
   11   11
   17   17

octave:5> A .* B %elementwise multiplication (not matrix multiplication)
ans =

   11   24
   39   56
   75   96

octave:6> A
A =

   1   2
   3   4
   5   6

octave:7> B
B =

   11   12
   13   14
   15   16

octave:8> A .* B
ans =

   11   24
   39   56
   75   96

octave:9> A
A =

   1   2
   3   4
   5   6

octave:10> A .^ 2
ans =

    1    4
    9   16
   25   36

octave:11> v = [1;2;3]
v =

   1
   2
   3

octave:12> 1 ./ v
ans =

   1.0000
   0.5000
   0.3333

octave:13> 1 ./ A
ans =

   1.0000   0.5000
   0.3333   0.2500
   0.2000   0.1667

octave:14> % . denotes element wise operation
octave:14>
octave:14> log(v)
ans =

        0
   0.6931
   1.0986

octave:15> exp(v)
ans =

    2.7183
    7.3891
   20.0855

octave:16> v
v =

   1
   2
   3

octave:17> abs(v)
ans =

   1
   2
   3

octave:18> abs([-1;2;-3])
ans =

   1
   2
   3

octave:19> -v
ans =

  -1
  -2
  -3

octave:20> -v % -1*v
ans =

  -1
  -2
  -3

octave:21> v
v =

   1
   2
   3

octave:22> v + ones(length(v), 1)
ans =

   2
   3
   4

octave:23> length(v)
ans = 3
octave:24> ones(3, 1)
ans =

   1
   1
   1

octave:25> v
v =

   1
   2
   3

octave:26> v + 1
ans =

   2
   3
   4

octave:27> A
A =

   1   2
   3   4
   5   6

octave:28> A' %transpose
ans =

   1   3   5
   2   4   6

octave:29> (A')'
ans =

   1   2
   3   4
   5   6

octave:30>
octave:30>
octave:30> a = [1 15 2 0.5]
a =

    1.0000   15.0000    2.0000    0.5000

octave:31> val = max(A)
val =

   5   6

octave:32> val = max(a)
val = 15
octave:33> [val, ind] = max(a)
val = 15
ind = 2
octave:34>
octave:34>
octave:34> max(A) %column wise maximum
ans =

   5   6

octave:35> a
a =

    1.0000   15.0000    2.0000    0.5000

octave:36> a<3
ans =

  1  0  1  1

octave:37> a<3 %element wise comparison
ans =

  1  0  1  1

octave:38> find(a < 3)
ans =

   1   3   4

octave:39> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:40> help magic
'magic' is a function from the file C:\Program Files\GNU Octave\Octave-7.1.0\mingw64\share\octave\7.1.0\m\special-matrix\magic.m

 -- magic (N)

     Create an N-by-N magic square.

     A magic square is an arrangement of the integers '1:n^2' such that
     the row sums, column sums, and diagonal sums are all equal to the
     same value.

     Note: N must be a scalar greater than or equal to 3.  If you supply
     N less than 3, magic returns either a nonmagic square, or else the
     degenerate magic squares 1 and [].

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
octave:41> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:42> [r, c] = find(A >= 7)
r =

   1
   3
   2

c =

   1
   2
   3

octave:43> help find
'find' is a built-in function from the file libinterp/corefcn/find.cc

 -- IDX = find (X)
 -- IDX = find (X, N)
 -- IDX = find (X, N, DIRECTION)
 -- [i, j] = find (...)
 -- [i, j, v] = find (...)
     Return a vector of indices of nonzero elements of a matrix, as a
     row if X is a row vector or as a column otherwise.

     To obtain a single index for each matrix element, Octave pretends
     that the columns of a matrix form one long vector (like Fortran
     arrays are stored).  For example:

          find (eye (2))
            => [ 1; 4 ]

     If two inputs are given, N indicates the maximum number of elements
     to find from the beginning of the matrix or vector.

     If three inputs are given, DIRECTION should be one of "first" or
     "last", requesting only the first or last N indices, respectively.
     However, the indices are always returned in ascending order.

     If two outputs are requested, 'find' returns the row and column
     indices of nonzero elements of a matrix.  For example:

          [i, j] = find (2 * eye (2))
              => i = [ 1; 2 ]
              => j = [ 1; 2 ]

     If three outputs are requested, 'find' also returns a vector
     containing the nonzero values.  For example:

          [i, j, v] = find (3 * eye (2))
                 => i = [ 1; 2 ]
                 => j = [ 1; 2 ]
                 => v = [ 3; 3 ]

     If X is a multi-dimensional array of size m x n x p x ..., J
     contains the column locations as if X was flattened into a
     two-dimensional matrix of size m x (n + p + ...).

     Note that this function is particularly useful for sparse matrices,
     as it extracts the nonzero elements as vectors, which can then be
     used to create the original matrix.  For example:

          sz = size (a);
          [i, j, v] = find (a);
          b = sparse (i, j, v, sz(1), sz(2));

     See also: nonzeros.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
octave:44>
octave:44>
octave:44> a
a =

    1.0000   15.0000    2.0000    0.5000

octave:45> sum(a)
ans = 18.500
octave:46> prod(a) %product of all elements of a
ans = 15
octave:47> floor(a)
ans =

    1   15    2    0

octave:48> ceil(a)
ans =

    1   15    2    1

octave:49> rand(3)
ans =

   0.583628   0.060701   0.065385
   0.338734   0.028453   0.385362
   0.500821   0.392252   0.383876

octave:50> max(rand(3), rand(3))
ans =

   0.7103   0.8095   0.8783
   0.7298   0.5882   0.8996
   0.7295   0.8381   0.5965

octave:51>
octave:51>
octave:51>
octave:51> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:52> max(A, [], 1) %column wise maximum
ans =

   8   9   7

octave:53> max(a, [], 2) %row wise maximum
ans = 15
octave:54> max(A, [], 2) %row wise maximum
ans =

   8
   7
   9

octave:55> max(A) %default is column wise
ans =

   8   9   7

octave:56> max(max(A))
ans = 9
octave:57> max(A(:))
ans = 9
octave:58> A(:)
ans =

   8
   3
   4
   1
   5
   9
   6
   7
   2

octave:59> max(A(:))
ans = 9
octave:60>
octave:60>
octave:60> A = magic(9)
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:61> sum(A, 1) %column wise sum
ans =

   369   369   369   369   369   369   369   369   369

octave:62> sum(A, 2) %row wise sum
ans =

   369
   369
   369
   369
   369
   369
   369
   369
   369

octave:63> eye(9)
ans =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

octave:64> A
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:65> A .* eye(9)
ans =

   47    0    0    0    0    0    0    0    0
    0   68    0    0    0    0    0    0    0
    0    0    8    0    0    0    0    0    0
    0    0    0   20    0    0    0    0    0
    0    0    0    0   41    0    0    0    0
    0    0    0    0    0   62    0    0    0
    0    0    0    0    0    0   74    0    0
    0    0    0    0    0    0    0   14    0
    0    0    0    0    0    0    0    0   35

octave:66> sum(sum(A .* eye(9)))
ans = 369
octave:67> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:68> pinv(A) %inverse of A
ans =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

octave:69> temp = pinv(A)
temp =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

octave:70> temp*A
ans =

   1.0000e+00   6.2450e-16  -2.5813e-15
  -6.3838e-15   1.0000e+00   5.9397e-15
   2.8866e-15   1.9429e-16   1.0000e+00

octave:71>
