GNU Octave, version 7.1.0
Copyright (C) 1993-2022 The Octave Project Developers.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.

Octave was configured for "x86_64-w64-mingw32".

Additional information about Octave is available at https://www.octave.org.

Please contribute if you find this software useful.
For more information, visit https://www.octave.org/get-involved.html

Read https://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

octave:1> t = [0:0.01:0.98];
octave:2> y1 = sin(2*pi*4*t);
octave:3> plot(t, y1)
octave:4> y2 = cos(2*pi*4*t)
y2 =

 Columns 1 through 7:

   1.000000   0.968583   0.876307   0.728969   0.535827   0.309017   0.062791

 Columns 8 through 14:

  -0.187381  -0.425779  -0.637424  -0.809017  -0.929776  -0.992115  -0.992115

 Columns 15 through 21:

  -0.929776  -0.809017  -0.637424  -0.425779  -0.187381   0.062791   0.309017

 Columns 22 through 28:

   0.535827   0.728969   0.876307   0.968583   1.000000   0.968583   0.876307

 Columns 29 through 35:

   0.728969   0.535827   0.309017   0.062791  -0.187381  -0.425779  -0.637424

 Columns 36 through 42:

  -0.809017  -0.929776  -0.992115  -0.992115  -0.929776  -0.809017  -0.637424

 Columns 43 through 49:

  -0.425779  -0.187381   0.062791   0.309017   0.535827   0.728969   0.876307

 Columns 50 through 56:

   0.968583   1.000000   0.968583   0.876307   0.728969   0.535827   0.309017

 Columns 57 through 63:

   0.062791  -0.187381  -0.425779  -0.637424  -0.809017  -0.929776  -0.992115

 Columns 64 through 70:

  -0.992115  -0.929776  -0.809017  -0.637424  -0.425779  -0.187381   0.062791

 Columns 71 through 77:

   0.309017   0.535827   0.728969   0.876307   0.968583   1.000000   0.968583

 Columns 78 through 84:

   0.876307   0.728969   0.535827   0.309017   0.062791  -0.187381  -0.425779

 Columns 85 through 91:

  -0.637424  -0.809017  -0.929776  -0.992115  -0.992115  -0.929776  -0.809017

 Columns 92 through 98:

  -0.637424  -0.425779  -0.187381   0.062791   0.309017   0.535827   0.728969

 Column 99:

   0.876307

octave:5> y1 = sin(2*pi*4*t);
octave:6> y1 = sin(2*pi*4*t);
octave:7> plot(t, y1)
octave:8> y2 = cos(2*pi*4*t)
y2 =

 Columns 1 through 7:

   1.000000   0.968583   0.876307   0.728969   0.535827   0.309017   0.062791

 Columns 8 through 14:

  -0.187381  -0.425779  -0.637424  -0.809017  -0.929776  -0.992115  -0.992115

 Columns 15 through 21:

  -0.929776  -0.809017  -0.637424  -0.425779  -0.187381   0.062791   0.309017

 Columns 22 through 28:

   0.535827   0.728969   0.876307   0.968583   1.000000   0.968583   0.876307

 Columns 29 through 35:

   0.728969   0.535827   0.309017   0.062791  -0.187381  -0.425779  -0.637424

 Columns 36 through 42:

  -0.809017  -0.929776  -0.992115  -0.992115  -0.929776  -0.809017  -0.637424

 Columns 43 through 49:

  -0.425779  -0.187381   0.062791   0.309017   0.535827   0.728969   0.876307

 Columns 50 through 56:

   0.968583   1.000000   0.968583   0.876307   0.728969   0.535827   0.309017

 Columns 57 through 63:

   0.062791  -0.187381  -0.425779  -0.637424  -0.809017  -0.929776  -0.992115

 Columns 64 through 70:

  -0.992115  -0.929776  -0.809017  -0.637424  -0.425779  -0.187381   0.062791

 Columns 71 through 77:

   0.309017   0.535827   0.728969   0.876307   0.968583   1.000000   0.968583

 Columns 78 through 84:

   0.876307   0.728969   0.535827   0.309017   0.062791  -0.187381  -0.425779

 Columns 85 through 91:

  -0.637424  -0.809017  -0.929776  -0.992115  -0.992115  -0.929776  -0.809017

 Columns 92 through 98:

  -0.637424  -0.425779  -0.187381   0.062791   0.309017   0.535827   0.728969

 Column 99:

   0.876307

octave:9> plot(t, y2);
octave:10>
octave:10>
octave:10>
octave:10>
octave:10> plot(t, y1);
octave:11> hold on;
octave:12> plot(t, y2, 'r);
error: parse error:

  syntax error

>>> plot(t, y2, 'r);
                   ^
octave:12> plot(t, y2, 'r');
octave:13> xlabel('time')
octave:14> ylabel('value')
octave:15> legend('sin', 'cos')
octave:16> title('myplot')
octave:17> cd 'C:\Users\could\Desktop'; print -dpng 'myplot.png' %to save the plot
octave:18>
octave:18> help plot %to see other file formats to save
'plot' is a function from the file C:\Program Files\GNU Octave\Octave-7.1.0\mingw64\share\octave\7.1.0\m\plot\draw\plot.m

 -- plot (Y)
 -- plot (X, Y)
 -- plot (X, Y, FMT)
 -- plot (..., PROPERTY, VALUE, ...)
 -- plot (X1, Y1, ..., XN, YN)
 -- plot (HAX, ...)
 -- H = plot (...)
     Produce 2-D plots.

     Many different combinations of arguments are possible.  The
     simplest form is

          plot (Y)

     where the argument is taken as the set of Y coordinates and the X
     coordinates are taken to be the range '1:numel (Y)'.

     If more than one argument is given, they are interpreted as

          plot (Y, PROPERTY, VALUE, ...)

     or

          plot (X, Y, PROPERTY, VALUE, ...)

     or

          plot (X, Y, FMT, ...)

     and so on.  Any number of argument sets may appear.  The X and Y
     values are interpreted as follows:

        * If a single data argument is supplied, it is taken as the set
          of Y coordinates and the X coordinates are taken to be the
          indices of the elements, starting with 1.

        * If X and Y are scalars, a single point is plotted.

        * 'squeeze()' is applied to arguments with more than two
          dimensions, but no more than two singleton dimensions.

        * If both arguments are vectors, the elements of Y are plotted
          versus the elements of X.

        * If X is a vector and Y is a matrix, then the columns (or rows)
          of Y are plotted versus X.  (using whichever combination
          matches, with columns tried first.)

        * If the X is a matrix and Y is a vector, Y is plotted versus
          the columns (or rows) of X.  (using whichever combination
          matches, with columns tried first.)

        * If both arguments are matrices, the columns of Y are plotted
          versus the columns of X.  In this case, both matrices must
          have the same number of rows and columns and no attempt is
          made to transpose the arguments to make the number of rows
          match.

     Multiple property-value pairs may be specified, but they must
     appear in pairs.  These arguments are applied to the line objects
     drawn by 'plot'.  Useful properties to modify are "linestyle",
     "linewidth", "color", "marker", "markersize", "markeredgecolor",
     "markerfacecolor".  The full list of properties is documented at
     Line Properties.

     The FMT format argument can also be used to control the plot style.
     It is a string composed of four optional parts:
     "<linestyle><marker><color><;displayname;>".  When a marker is
     specified, but no linestyle, only the markers are plotted.
     Similarly, if a linestyle is specified, but no marker, then only
     lines are drawn.  If both are specified then lines and markers will
     be plotted.  If no FMT and no PROPERTY/VALUE pairs are given, then
     the default plot style is solid lines with no markers and the color
     determined by the "colororder" property of the current axes.

     Format arguments:

     linestyle

          '-'  Use solid lines (default).
          '--' Use dashed lines.
          ':'  Use dotted lines.
          '-.' Use dash-dotted lines.

     marker

          '+'  crosshair
          'o'  circle
          '*'  star
          '.'  point
          'x'  cross
          '|'  vertical line
          '_'  horizontal line
          's'  square
          'd'  diamond
          '^'  upward-facing triangle
          'v'  downward-facing triangle
          '>'  right-facing triangle
          '<'  left-facing triangle
          'p'  pentagram
          'h'  hexagram

     color

          'k', "black"    blacK
          'r', "red"      Red
          'g', "green"    Green
          'b', "blue"     Blue
          'y', "yellow"   Yellow
          'm',            Magenta
          "magenta"
          'c', "cyan"     Cyan
          'w', "white"    White

     ";displayname;"
          The text between semicolons is used to set the "displayname"
          property which determines the label used for the plot legend.

     The FMT argument may also be used to assign legend labels.  To do
     so, include the desired label between semicolons after the
     formatting sequence described above, e.g., "+b;Data Series 3;".
     Note that the last semicolon is required and Octave will generate
     an error if it is left out.

     Here are some plot examples:

          plot (x, y, "or", x, y2, x, y3, "m", x, y4, "+")

     This command will plot 'y' with red circles, 'y2' with solid lines,
     'y3' with solid magenta lines, and 'y4' with points displayed as
     '+'.

          plot (b, "*", "markersize", 10)

     This command will plot the data in the variable 'b', with points
     displayed as '*' and a marker size of 10.

          t = 0:0.1:6.3;
          plot (t, cos(t), "-;cos(t);", t, sin(t), "-b;sin(t);");

     This will plot the cosine and sine functions and label them
     accordingly in the legend.

     If the first argument HAX is an axes handle, then plot into this
     axes, rather than the current axes returned by 'gca'.

     The optional return value H is a vector of graphics handles to the
     created line objects.

     To save a plot, in one of several image formats such as PostScript
     or PNG, use the 'print' command.

     See also: axis, box, grid, hold, legend, title, xlabel, ylabel,
     xlim, ylim, ezplot, errorbar, fplot, line, plot3, polar, loglog,
     semilogx, semilogy, subplot.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
octave:19> close
octave:20>
octave:20> figure(1); plot(t, y1);
octave:21> figure(2); plot(t, y2)
octave:22> close
octave:23> close
octave:24>
octave:24> subplot(1, 2, 1); %Divides plot into a 1x2 grid, access first element
octave:25> plot(t, y1)
octave:26> subplot(1, 2, 1); %Divides plot into a 1x2 grid, access first element
octave:27> plot(t, y1)
octave:28> subplot(1, 2, 2);
octave:29> plot(t, y2);
octave:30> axis([0.5 1 -1 1]) %changes axis values. first two parameters are for x axi
s and next two are for y axis
octave:31> help axis
'axis' is a function from the file C:\Program Files\GNU Octave\Octave-7.1.0\mingw64\share\octave\7.1.0\m\plot\appearance\axis.m

 -- axis ()
 -- axis ([X_LO X_HI])
 -- axis ([X_LO X_HI Y_LO Y_HI])
 -- axis ([X_LO X_HI Y_LO Y_HI Z_LO Z_HI])
 -- axis ([X_LO X_HI Y_LO Y_HI Z_LO Z_HI C_LO C_HI])
 -- axis (OPTION)
 -- axis (OPTION1, OPTION2, ...)
 -- axis (HAX, ...)
 -- LIMITS = axis ()
     Set axis limits and appearance.

     The argument LIMITS should be a 2-, 4-, 6-, or 8-element vector.
     The first and second elements specify the lower and upper limits
     for the x-axis.  The third and fourth specify the limits for the
     y-axis, the fifth and sixth specify the limits for the z-axis, and
     the seventh and eighth specify the limits for the color axis.  The
     special values '-Inf' and 'Inf' may be used to indicate that the
     limit should be automatically computed based on the data in the
     axes.

     Without any arguments, 'axis' turns autoscaling on.

     With one output argument, 'LIMITS = axis' returns the current axis
     limits.

     The vector argument specifying limits is optional, and additional
     string arguments may be used to specify various axis properties.

     The following options control the aspect ratio of the axes.

     "equal"
          Force x-axis unit distance to equal y-axis (and z-axis) unit
          distance.

     "square"
          Force a square axis aspect ratio.

     "vis3d"
          Set aspect ratio modes ("DataAspectRatio",
          "PlotBoxAspectRatio") to "manual" for rotation without
          stretching.

     "normal"
     "fill"
          Restore default automatically computed aspect ratios.

     The following options control the way axis limits are interpreted.

     "auto"
     "auto[xyz]"
     "auto [xyz]"
          Set nice auto-computed limits around the data for all axes, or
          only the specified axes.

     "manual"
          Fix the current axes limits.

     "tight"
          Fix axes to the limits of the data.

     "image"
          Equivalent to "tight" and "equal".

     The following options affect the appearance of tick marks.

     "tic"
     "tic[xyz]"
     "tic [xyz]"
          Turn tick marks on for all axes, or turn them on for the
          specified axes and off for the remainder.

     "label"
     "label[xyz]"
     "label [xyz]"
          Turn tick labels on for all axes, or turn them on for the
          specified axes and off for the remainder.

     "nolabel"
          Turn tick labels off for all axes.

     Note: If there are no tick marks for an axes then there can be no
     labels.

     The following options affect the direction of increasing values on
     the axes.

     "xy"
          Default y-axis, larger values are near the top.

     "ij"
          Reverse y-axis, smaller values are near the top.

     The following options affects the visibility of the axes.

     "on"
          Make the axes visible.

     "off"
          Hide the axes.

     If the first argument HAX is an axes handle, then operate on this
     axes rather than the current axes returned by 'gca'.

     Example 1: set X/Y limits and force a square aspect ratio

          axis ([1, 2, 3, 4], "square");

     Example 2: enable tick marks on all axes, enable tick mark labels
     only on the y-axis

          axis ("tic", "labely");

     See also: xlim, ylim, zlim, caxis, daspect, pbaspect, box, grid.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
octave:32> clf
octave:33> A = magic(5)
A =

   17   24    1    8   15
   23    5    7   14   16
    4    6   13   20   22
   10   12   19   21    3
   11   18   25    2    9

octave:34> imagesc(A)
octave:35> imagesc(A), colorbar, colormap gray;
octave:36> imagesc(magic(15)), colorbar, colormap gray;
octave:37> a=1, b=2, c=3 %three commands in same line
a = 1
b = 2
c = 3
octave:38> %comma chaining of function calls
octave:38>
